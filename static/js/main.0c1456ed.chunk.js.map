{"version":3,"sources":["actions/actions.js","reducers/reducers.js","store.js","components/ToDoListItem.js","components/NewToDoForm.js","components/ToDoList.js","components/NavBar.js","components/Home.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/UserList.js","App.js","index.js"],"names":["CREATE_TODO","REMOVE_TODO","MARK_TODO_AS_COMPLETED","REQUEST_ROBOT_PENDING","REQUEST_ROBOT_SUCCESS","REQUEST_ROBOT_FAILED","CHANGE_SEARCH_FIELD","initialStateRobots","isPending","robots","error","initialStateSearch","searchField","reducers","todos","state","action","type","payload","text","newTodo","isCompleted","concat","map","todo","filter","requestRobots","searchRobots","rootReducer","combineReducers","ToDoListItem","onRemovePressed","onCompletedPressed","className","style","textAlign","onClick","connect","dispatch","onCreatePressed","createTodo","useState","inputValue","setInputValue","placeholder","value","onChange","e","target","onKeyDown","keyCode","some","removeTodo","markTodoAsCompleted","width","margin","marginTop","id","NavBar","to","Home","SearchBox","searchChange","Card","robot","src","height","alt","name","email","CardList","User","rotots","this","props","onRequestRobots","onSearchChange","filteredRobots","toLowerCase","includes","toUpperCase","Component","event","fetch","then","response","json","data","catch","App","exact","path","component","UserList","ToDoList","ReactDOM","render","store","createStore","applyMiddleware","thunkMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.0c1456ed.chunk.js","sourcesContent":["export const CREATE_TODO = 'CREATE_TODO';\r\n\r\nexport const createTodo = text => ({\r\n    type: CREATE_TODO,\r\n    payload: { text },\r\n});\r\n\r\nexport const REMOVE_TODO = 'REMOVE_TODO';\r\nexport const removeTodo = text => ({\r\n    type: REMOVE_TODO,\r\n    payload: { text },\r\n});\r\n\r\nexport const MARK_TODO_AS_COMPLETED = 'MARK_TODO_AS_COMPLETED';\r\nexport const markTodoAsCompleted = (text) => ({\r\n    type: MARK_TODO_AS_COMPLETED,\r\n    payload: { text },\r\n});\r\n\r\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\r\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\r\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOT_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOT_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOT_FAILED }));\r\n}\r\n\r\nexport const CHANGE_SEARCH_FIELD = 'REQUEST_CHANGE_SEARCH_FIELDROBOT_FAILED';\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n\r\n})\r\n\r\n","import { \r\n    CREATE_TODO, \r\n    REMOVE_TODO, \r\n    MARK_TODO_AS_COMPLETED,\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOT_PENDING,\r\n    REQUEST_ROBOT_SUCCESS,\r\n    REQUEST_ROBOT_FAILED,    \r\n} from \"../actions/actions\";\r\n\r\n\r\nexport const todos = (state = [], action) =>{\r\n    // console.log(state)\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case CREATE_TODO: {\r\n            const { text } = payload;\r\n            const newTodo = {\r\n                text,\r\n                isCompleted: false,\r\n            };\r\n            return state.concat(newTodo)\r\n        }\r\n        case MARK_TODO_AS_COMPLETED: {\r\n            const { text } = payload;\r\n\r\n            return state.map(todo => {\r\n                if(todo.text == text) {\r\n                    return { ...todo, isCompleted: !todo.isCompleted };\r\n                }\r\n                return todo;\r\n            });\r\n        }\r\n        case REMOVE_TODO: {\r\n            const { text } = payload;\r\n            return state.filter( todo => todo.text !== text);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOT_PENDING:\r\n            return {...state, isPending: true}\r\n        case REQUEST_ROBOT_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false};\r\n        case REQUEST_ROBOT_FAILED:\r\n            return {...state, error: action.payload, isPending: false};        \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initialStateSearch = {\r\n    searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload};        \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { todos, requestRobots, searchRobots } from './reducers/reducers.js';\r\n\r\nconst reducers = {\r\n    todos,\r\n    requestRobots,\r\n    searchRobots,\r\n};\r\n\r\nconst rootReducer = combineReducers(reducers);\r\n\r\nexport const configureStore = () => createStore(rootReducer, applyMiddleware(thunkMiddleware));","import React from 'react';\r\n\r\nconst ToDoListItem = ({ todo, onRemovePressed, onCompletedPressed }) => (\r\n    <div className=\"ui segment\">\r\n        \r\n        \r\n        <div className=\"ui grid\">            \r\n            <div className=\"row\">\r\n                <div className=\"column\">\r\n                    <h3 style={{textAlign: 'left'}}>{ todo.text }</h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"column\"> \r\n                    <button \r\n                        onClick={() => onRemovePressed(todo.text)}\r\n                        className=\"ui red button remove-button right floated\"\r\n                    >Delete</button>\r\n                    {\r\n                        todo.isCompleted\r\n                        ? <button \r\n                            onClick={() => {onCompletedPressed(todo.text)}}\r\n                            className=\"ui green button completed-button right floated\"\r\n                        >Done</button>\r\n                        : <button \r\n                            onClick={() => {onCompletedPressed(todo.text)}}\r\n                            className=\"ui inverted green button right floated\"\r\n                            >Mark As Done</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default ToDoListItem;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createTodo } from '../actions/actions';\r\n\r\nconst NewToDoForm = ({ todos, onCreatePressed }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleKeypress = e => {\r\n        if (e.keyCode === 13) {\r\n            onCreatePressed(e.target.value);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"todo-item-container\">\r\n            <div className=\"ui form\">\r\n                <div className=\"field\">\r\n                    <div className=\"ui action input\">\r\n                        <input \r\n                            className=\"new-todo-form\" \r\n                            type=\"text\"\r\n                            placeholder=\"Type your new todo here\"\r\n                            value={inputValue}\r\n                            onChange={e => setInputValue(e.target.value)} \r\n                            onKeyDown={handleKeypress}\r\n                        />\r\n                        <button \r\n                            className=\"new-todo-button ui button\"\r\n                            onClick={() => {\r\n                                const isDuplicateText = todos.some(todo => todo.text === inputValue);\r\n                                if(!isDuplicateText && inputValue != ''){\r\n                                    onCreatePressed(inputValue);\r\n                                    setInputValue('');\r\n                                }\r\n                            }}\r\n                            > Create Todo </button>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>  \r\n        </div>\r\n\r\n    );\r\n};\r\n    \r\nconst mapStateToProps = state => ({\r\n    todos: state.todos,\r\n});\r\n\r\nconst matDispatchToProps = dispatch => ({\r\n    onCreatePressed: text => dispatch(createTodo(text)),\r\n});\r\n\r\nexport default connect(mapStateToProps, matDispatchToProps)(NewToDoForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ToDoListItem from './ToDoListItem';\r\nimport NewToDoForm from './NewToDoForm';\r\nimport { removeTodo, markTodoAsCompleted } from '../actions/actions';\r\n\r\nconst ToDoList = ({ todos, onRemovePressed, onCompletedPressed }) => {\r\n    return (\r\n        <div className=\"list-wrapper ui container\">\r\n            <div style={{ width: '500px', margin: '0 auto', marginTop: '80px' }}>\r\n                <NewToDoForm />\r\n                {\r\n                    todos.map((todo, id) => <ToDoListItem \r\n                    key={id} todo={todo} \r\n                    onRemovePressed={onRemovePressed} \r\n                    onCompletedPressed={onCompletedPressed} \r\n                    />)\r\n                }\r\n            </div>            \r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({ \r\n    todos: state.todos,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRemovePressed: text => dispatch(removeTodo(text)),\r\n    onCompletedPressed: text => dispatch(markTodoAsCompleted(text)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoList);","import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n    <nav className=\"ui raised very padded segment\" id=\"nav-bar\">\r\n        <Link className=\"ui inverted segment\" to=\"/\">React Tutorials</Link>\r\n        <div className=\"ui right floated header\">\r\n            <NavLink className=\"ui button\" to=\"/\">Home</NavLink>\r\n            <NavLink className=\"ui button\" to=\"/users\">Api Tutorial</NavLink>\r\n            <NavLink className=\"ui button\" to=\"/to-do-list\">To Do List Tutorial </NavLink>\r\n        </div>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"ui raised very padded text container segment\" style={{marginTop: '80px'}}>\r\n            <h3 className=\"ui header\"> Home </h3>\r\n            <p>\r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. \r\n                Integer fringilla, est eget rutrum pretium, purus est consectetur dui, non commodo odio metus eget sem. \r\n                Pellentesque ullamcorper, est non placerat suscipit, tortor odio ornare nulla, \r\n                sed tempus elit ipsum vitae lectus. \r\n                Morbi nec mauris non metus sodales ullamcorper. \r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => (\r\n    <div className=\"pd2\">\r\n        <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"text\"\r\n            onChange={searchChange}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Card = ({ robot }) => (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img src={`https://robohash.org/${robot.id}`} width=\"200\" height=\"auto\" alt=\"Robot\" />\r\n        <div>\r\n            <h2>{robot.name}</h2>\r\n            <p>{robot.email}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => (\r\n    <div>\r\n        {\r\n            robots.map((robot, id) => <Card key={id} robot={robot} />)\r\n        }\r\n    </div>\r\n);\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions/actions';\r\nimport SearchBox from './SearchBox';\r\nimport CardList from './CardList';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n};\r\n\r\nclass User extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            rotots: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const { robots, searchField, onSearchChange, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return isPending ?\r\n            <h1 className=\"tc\">Loading...</h1> :\r\n            <div className=\"tc\">\r\n                <h1>{'Robot Friends'.toUpperCase()}</h1>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <CardList robots={filteredRobots} />\r\n            </div>\r\n    };\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(User);","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport ToDoList from './components/ToDoList';\r\nimport NavBar from './components/NavBar';\r\nimport Home from './components/Home';\r\nimport UserList from './components/UserList';\r\nimport 'tachyons';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <NavBar />\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/users\" component={UserList} />\r\n        <Route exact path=\"/to-do-list\" component={ToDoList} />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from './store';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <Provider store={configureStore()} >\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}